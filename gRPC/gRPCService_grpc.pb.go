// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: gRPC/gRPCService.proto

package gRPC

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServiceGRPCClient is the client API for ServiceGRPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServiceGRPCClient interface {
	// CreateUser
	CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserRes, error)
	GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (ServiceGRPC_GetUsersClient, error)
	UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRes, error)
	DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserRes, error)
}

type serviceGRPCClient struct {
	cc grpc.ClientConnInterface
}

func NewServiceGRPCClient(cc grpc.ClientConnInterface) ServiceGRPCClient {
	return &serviceGRPCClient{cc}
}

func (c *serviceGRPCClient) CreateUser(ctx context.Context, in *CreateUserReq, opts ...grpc.CallOption) (*CreateUserRes, error) {
	out := new(CreateUserRes)
	err := c.cc.Invoke(ctx, "/gRPC.ServiceGRPC/CreateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceGRPCClient) GetUsers(ctx context.Context, in *GetUsersReq, opts ...grpc.CallOption) (ServiceGRPC_GetUsersClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServiceGRPC_ServiceDesc.Streams[0], "/gRPC.ServiceGRPC/GetUsers", opts...)
	if err != nil {
		return nil, err
	}
	x := &serviceGRPCGetUsersClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ServiceGRPC_GetUsersClient interface {
	Recv() (*GetUsersRes, error)
	grpc.ClientStream
}

type serviceGRPCGetUsersClient struct {
	grpc.ClientStream
}

func (x *serviceGRPCGetUsersClient) Recv() (*GetUsersRes, error) {
	m := new(GetUsersRes)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *serviceGRPCClient) UpdateUser(ctx context.Context, in *UpdateUserReq, opts ...grpc.CallOption) (*UpdateUserRes, error) {
	out := new(UpdateUserRes)
	err := c.cc.Invoke(ctx, "/gRPC.ServiceGRPC/UpdateUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serviceGRPCClient) DeleteUser(ctx context.Context, in *DeleteUserReq, opts ...grpc.CallOption) (*DeleteUserRes, error) {
	out := new(DeleteUserRes)
	err := c.cc.Invoke(ctx, "/gRPC.ServiceGRPC/DeleteUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ServiceGRPCServer is the server API for ServiceGRPC service.
// All implementations must embed UnimplementedServiceGRPCServer
// for forward compatibility
type ServiceGRPCServer interface {
	// CreateUser
	CreateUser(context.Context, *CreateUserReq) (*CreateUserRes, error)
	GetUsers(*GetUsersReq, ServiceGRPC_GetUsersServer) error
	UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRes, error)
	DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserRes, error)
	mustEmbedUnimplementedServiceGRPCServer()
}

// UnimplementedServiceGRPCServer must be embedded to have forward compatible implementations.
type UnimplementedServiceGRPCServer struct {
}

func (UnimplementedServiceGRPCServer) CreateUser(context.Context, *CreateUserReq) (*CreateUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateUser not implemented")
}
func (UnimplementedServiceGRPCServer) GetUsers(*GetUsersReq, ServiceGRPC_GetUsersServer) error {
	return status.Errorf(codes.Unimplemented, "method GetUsers not implemented")
}
func (UnimplementedServiceGRPCServer) UpdateUser(context.Context, *UpdateUserReq) (*UpdateUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateUser not implemented")
}
func (UnimplementedServiceGRPCServer) DeleteUser(context.Context, *DeleteUserReq) (*DeleteUserRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteUser not implemented")
}
func (UnimplementedServiceGRPCServer) mustEmbedUnimplementedServiceGRPCServer() {}

// UnsafeServiceGRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServiceGRPCServer will
// result in compilation errors.
type UnsafeServiceGRPCServer interface {
	mustEmbedUnimplementedServiceGRPCServer()
}

func RegisterServiceGRPCServer(s grpc.ServiceRegistrar, srv ServiceGRPCServer) {
	s.RegisterService(&ServiceGRPC_ServiceDesc, srv)
}

func _ServiceGRPC_CreateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceGRPCServer).CreateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gRPC.ServiceGRPC/CreateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceGRPCServer).CreateUser(ctx, req.(*CreateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceGRPC_GetUsers_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetUsersReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ServiceGRPCServer).GetUsers(m, &serviceGRPCGetUsersServer{stream})
}

type ServiceGRPC_GetUsersServer interface {
	Send(*GetUsersRes) error
	grpc.ServerStream
}

type serviceGRPCGetUsersServer struct {
	grpc.ServerStream
}

func (x *serviceGRPCGetUsersServer) Send(m *GetUsersRes) error {
	return x.ServerStream.SendMsg(m)
}

func _ServiceGRPC_UpdateUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceGRPCServer).UpdateUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gRPC.ServiceGRPC/UpdateUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceGRPCServer).UpdateUser(ctx, req.(*UpdateUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServiceGRPC_DeleteUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteUserReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServiceGRPCServer).DeleteUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gRPC.ServiceGRPC/DeleteUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServiceGRPCServer).DeleteUser(ctx, req.(*DeleteUserReq))
	}
	return interceptor(ctx, in, info, handler)
}

// ServiceGRPC_ServiceDesc is the grpc.ServiceDesc for ServiceGRPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServiceGRPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gRPC.ServiceGRPC",
	HandlerType: (*ServiceGRPCServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateUser",
			Handler:    _ServiceGRPC_CreateUser_Handler,
		},
		{
			MethodName: "UpdateUser",
			Handler:    _ServiceGRPC_UpdateUser_Handler,
		},
		{
			MethodName: "DeleteUser",
			Handler:    _ServiceGRPC_DeleteUser_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetUsers",
			Handler:       _ServiceGRPC_GetUsers_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gRPC/gRPCService.proto",
}
